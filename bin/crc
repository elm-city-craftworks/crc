#!/usr/bin/env ruby

require "bundler"
Bundler.require

class CardReader
  def initialize(filename)
    @cards = []

    File.foreach(filename) do |line|
      case line
      when /\s*~~~+\s*/
        @cards << :break
      when /##\s+(.*)/
        @cards << { :candidate => $1, :responsibilities => [], :collaborators => [] }
      when /-\s+(.*)\s+/
        @cards.last[:responsibilities] << $1
      when />\s+(.*)\s+/
        @cards.last[:collaborators] << $1
      end
    end
  end

  attr_reader :cards
end

class CardRenderer
  include Prawn::View

  def initialize(cards)
    cards.each { |e| draw_card(e) }
  end

  def draw_card(card)
    return start_new_page if card == :break
    bounding_box [bounds.width*0.15, cursor], :height => 150, :width => bounds.width*0.7 do
      stroke_bounds

      add_dest card[:candidate], dest_xyz(bounds.absolute_left, y)
      move_down 5
      
      indent(10) do
        text card[:candidate], :size => 16
      end

      stroke_horizontal_rule

      ypos = cursor

      move_down 10

      float do
        indent(10) do
          card[:responsibilities].each do |e|
            text "• #{e}", :size => 11
            move_down 5
          end
        end
      end

      indent(bounds.width*0.6 + 10) do
        card[:collaborators].each do |e|
          text %{›› <link anchor="#{e}">#{e}</link>}, :size => 11,
                                                     :inline_format => true
          move_down 5
        end
      end

      stroke_vertical_line ypos, bounds.bottom, :at => bounds.left + bounds.width * 0.6
    end
    move_down 20
  end
end

CardRenderer.new(CardReader.new(ARGV[0]).cards).save_as(ARGV[1])
